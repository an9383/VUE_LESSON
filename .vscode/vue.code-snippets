{
  // Place your VueReact workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //   "scope": "javascript,typescript",
  //   "prefix": "log",
  //   "body": [
  //     "console.log('$1');",
  //     "$2"
  //   ],
  //   "description": "Log output to console"
  // }

  "Vue Instance": {
    "prefix": "vuei",
    "body": [
      "new Vue({",
      "    /* edtmc^2w */",
      "    el: '${1:}',",
      "    data: {",
      "      /* 인스턴스 안에서 사용되는 변수 등록, 공유 변수 */",
      "      ",
      "    },",
      "    //template: ``,",
      "    methods: {",
      "      /* 이벤트 핸들러 등록 + 일반 함수 */",
      "      ",
      "    },",
      "    components: {",
      "      /* 전역 컴포넌트인 경우는 등록하지 않는다. 전역 컴포넌트는 프로토타입 체인으로 찾을 수 있기 때문에 */",
      "      /* 지역 컴포넌트나 파일 컴포넌트만 등록 한다. 예시) \"태그명\" : 컴포넌트명 */",
      "      ",
      "    }, ",
      "    computed: {",
      "      /* 자동처리 + 동기식. 변수명이 메서드 명이다. 메서드로 작성. return 필수.  data 와 공존 불가 */",
      "      ",
      "    },",
      "    watch: {",
      "      /* 자동처리 + 비동기식. data 에 등록된 프로퍼티(변수) 모니터링. 메서드로 작성. 매개변수 필수. 외부 api 호출을 위해서 사용 */",
      "      ",
      "    },",
      "    created() {",
      "      console.log(\"created\");",
      "    },",
      "    mounted() {",
      "      console.log(\"mounted\");",
      "    },",
      "    updated() {",
      "      console.log(\"updated\");",
      "    },",
      "});",
      ""
    ],
    "description": "Vue Instance"
  },
  "Vue Component Gloabl": {
    "prefix": "vuegc",
    "body": [
      "Vue.component(\"${1:${TM_FILENAME_BASE}}\", { ",
      "  /* pdtmc^2w */",
      "  props: [] ,",
      "  data() {",
      "    /* 컴포넌트 안에서 사용되는 변수 등록. 개별 변수 */",
      "    return {",
      "      ",
      "    }",
      "  },",
      "  template: `",
      "    ",
      "  `,",
      "  methods: {",
      "    /* 이벤트 핸들러 등록 + 일반 함수 */",
      "    ",
      "  },",
      "  components: {",
      "    /* 전역 컴포넌트인 경우는 등록하지 않는다. 전역 컴포넌트는 프로토타입 체인으로 찾을 수 있기 때문에 */",
      "    /* 지역 컴포넌트나 파일 컴포넌트만 등록 한다. 예시) \"태그명\" : 컴포넌트명 */",
      "    ",
      "  },",
      "  computed: {",
      "    /* 자동처리 + 동기식. 변수명이 메서드 명이다. 메서드로 작성. return 필수. data 와 공존 불가  */",
      "    ",
      "  },",
      "  watch: {",
      "    /* 자동처리 + 비동기식. data 에 등록된 프로퍼티(변수) 모니터링. 메서드로 작성. 매개변수 필수. 외부 api 호출을 위해서 사용 */",
      "    ",
      "  },",
      "  created() {",
      "    console.log(\"created\");",
      "  },",
      "  mounted() {",
      "    console.log(\"mounted\");",
      "  },",
      "  updated() {",
      "    console.log(\"updated\");",
      "  },",
      "});",
      ""
    ],
    "description": "Vue Global Component"
  },
  "Vue Local Component": {
    "prefix": "vuelc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = { ",
      "  /* pdtmc^2w */",
      "  props: [] ,",
      "  data() {",
      "    /* 컴포넌트 안에서 사용되는 변수 등록. 개별 변수 */",
      "    return {",
      "      ",
      "    }",
      "  },",
      "  template: `",
      "    ",
      "  `,",
      "  methods: {",
      "    /* 이벤트 핸들러 등록 + 일반 함수 */",
      "    ",
      "  },",
      "  components: {",
      "      /* 전역 컴포넌트인 경우는 등록하지 않는다. 전역 컴포넌트는 프로토타입 체인으로 찾을 수 있기 때문에 */",
      "      /* 지역 컴포넌트나 파일 컴포넌트만 등록 한다. 예시) \"태그명\" : 컴포넌트명 */",
      "      ",
      "  },",
      "  computed: {",
      "    /* 자동처리 + 동기식. 변수명이 메서드 명이다. 메서드로 작성. return 필수. data 와 공존 불가  */",
      "    ",
      "  },",
      "  watch: {",
      "    /* 자동처리 + 비동기식. data 에 등록된 프로퍼티(변수) 모니터링. 메서드로 작성. 매개변수 필수. 외부 api 호출을 위해서 사용  */",
      "    ",
      "  },",
      "  created() {",
      "    console.log(\"created\");",
      "  },",
      "  mounted() {",
      "    console.log(\"mounted\");",
      "  },",
      "  updated() {",
      "    console.log(\"updated\");",
      "  },",
      "};",
      ""
    ],
    "description": "Vue Local Component"
  },
  "Vue File Component": {
    "prefix": "vuefc",
    "body": [
      "<style scoped></style>",
      "",
      "<template>",
      "  <div>",
      "    ${1:${TM_FILENAME_BASE}}",
      "  </div>",
      "</template>",
      "",
      "<script>",
      " // vuex 라이브러리에서 mapActions, mapMutations, mapState, mapGetters 함를 가져옵니다.",
      " // import { mapActions, mapMutations, mapState, mapGetters } from 'vuex';",
      "",
      "  export default { ",
      "    /* pdtmc^2w */",
      "    props: [] ,",
      "    data() {",
      "      /* 컴포넌트 안에서 사용되는 변수 등록. 개별 변수 */",
      "      return {",
      "        ",
      "      }",
      "    },",
      "    //template: ``,",
      "    methods: {",
      "      /* 이벤트 핸들러 등록 + 일반 함수 */",
      "      ",
      "      /* vuex 를 사용하는 경우",
      "      mapActions 는 store의 actions 를 가져오는 헬퍼 메서드입니다.",
      "      namespaced: true를 설정한 경우 네임스페이스를 사용하기 때문에 store의 모듈 명을 적어주어야 합니다.",
      "      store 모듈에서 actions 를 가져오는 2가지 방식",
      "      1) store.모듈명.actions 이름 바꾸어 사용하기(추천방식)",
      "         ...mapActions('모듈명', { dispatch액션명1: '액션명1', dispatch액션명2: '액션명2' }),",
      "      2) store.모듈명.actions 이름 그대로 사용하기",
      "         ...mapActions('모듈명', ['액션명1', '액션명2']),",
      "      */",
      "      ",
      "    },",
      "    components: {",
      "      /* 전역 컴포넌트인 경우는 등록하지 않는다. 전역 컴포넌트는 프로토타입 체인으로 찾을 수 있기 때문에 */",
      "      /* 지역 컴포넌트나 파일 컴포넌트만 등록 한다. 예시) \"태그명\" : 컴포넌트명 */",
      "      ",
      "    },",
      "    computed: {",
      "      /* 자동처리 + 동기식. 메서드로 작성. return 필수. data 와 공존 불가 */",
      "      ",
      "      /* vuex 를 사용하는 경우",
      "      mapGetters 는 store의 getters 를 가져오는 헬퍼메서드입니다.",
      "      namespaced: true를 설정한 경우 네임스페이스를 사용하기 때문에 store의 모듈 명을 적어주어야 합니다.",
      "      store 모듈에서 getters 를 가져오는 2가지 방식",
      "      1) store.모듈명.getters 이름 바꾸어 사용하기 ",
      "         ...mapGetters('모듈명', { get게터명1: '게터명1', get게터명2: '게터명2' }),",
      "      2) store.모듈명.getters 이름 그대로 사용하기(추천방식)",
      "         ...mapGetters('모듈명', ['게터명1', '게터명2']),",
      "      */",
      "      ",
      "    },",
      "    watch: {",
      "        /* 자동처리 + 비동기식. data 에 등록된 프로퍼티(변수) 모니터링. 메서드로 작성. 매개변수 필수. 외부 api 호출을 위해서 사용 */",
      "        ",
      "    },",
      "    created() {",
      "      console.log(\"created\");",
      "    },",
      "    mounted() {",
      "      console.log(\"mounted\");",
      "      /* store의 actions 호출 */",
      "      // this.\\$store.dispatch('액션명', payload);",
      "    },",
      "    updated() {",
      "      console.log(\"updated\");",
      "    },",
      "  }",
      "</script>",
      ""
    ],
    "description": "Vue File Component"
  },
  "Vue plugin import": {
    "prefix": "vueplugin",
    "body": [
      "",
      "<!-- vue 플러그인 임포트   -->",
      "<script src=\"https://unpkg.com/vue@2.7.8/dist/vue.js\">/* vue 플러그인 임포트 */</script>",
      "<script src=\"https://unpkg.com/vuex@3.6.2/dist/vuex.js\"> /* vuex 플러그인 임포트 */</script>",
      "<script src=\"https://unpkg.com/vue-router@3.5.4/dist/vue-router.js\"> /* vue 라우터 플러그인 임포트 */</script>",
      "<script src=\"https://unpkg.com/axios/dist/axios.min.js\"> /* axios 플러그인 임포트 */</script>",
      "<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"> /* jQuery 플러그인 임포트 */</script>",
      "<script>",
      "    ",
      "</script>"
    ],
    "description": "Vue plugin import"
  },
  "Vuex Instance": {
    "prefix": "vuex",
    "body": [
      "// Vuex store 모듈 만들기",
      "import axios from 'axios';",
      "",
      "const store = {",
      "  namespaced: true /* 모듈 store 여부 설정 */,",
      "  actions: {",
      "    /* 왜 actions를 사용하나? 비동기로 외부 함수 호출하기 위해서",
      "     * actions 에는 메서드만 등록 가능하다.",
      "     * 첫번째인자: 무조건 mutations로 고정.",
      "     * 두번째인자: 값. store.dispatch()호출시 넘겨지는 값.",
      "     */",
      "    set( mutations/* 고정 */, payload ){",
      "      const { commit } = mutations; ",
      "      commit(\"set\", payload );",
      "    },",
      "    get( mutations/* 고정 */, payload ){",
      "      const { commit } = mutations; ",
      "      commit(\"get\", payload );",
      "    },",
      "  },",
      "  mutations: {",
      "    /* 왜 mutations 를 사용하나? state 를 바꾸기 위해서",
      "     * mutations 에는 메서드만 등록 가능하다.",
      "     * 첫번째인자: 무조건 state 로 고정.",
      "     * 두번째인자: 값. mutations.commit() 호출시 넘겨지는 값.",
      "     * */",
      "    set(state/* 고정 */, param/* mutations.commit 호출시 넘겨지는 값 */){",
      "      state.인자 = param;",
      "    },",
      "    get(state/* 고정 */, param/* mutations.commit 호출시 넘겨지는 값 */){",
      "      state.인자 = param;",
      "    },",
      "  },",
      "  state: {",
      "    /* vue인스턴스나 컴포넌트의 data 프로퍼티에 해당 */",
      "    인자: \"STORE STATE\",",
      "  },",
      "  getters: {",
      "    /* state 변경 정보를 컴포넌트에 전달하는 역활.",
      "     * 메서드로 만들어야 하며 메서드명은 state 의 이름을 그대로 사용",
      "     * 첫번째인자: 무조건 state",
      "     * 컴포넌트에서는 computed를 사용하여 store의 state 변경 정보를 자동으로 가져오게 된다.",
      "     * 예시) message()=> store.getters.인자;",
      "     */",
      "    인자(state/* 고정 */){",
      "      return state.인자;",
      "    },",
      "  },",
      "};",
      "",
      "export default store;"
    ],
    "description": "make a vuex store"
  }
}
