{
  // Place your VueReact workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  //     "scope": "javascript,typescript",
  //     "prefix": "log",
  //     "body": [
  //         "console.log('$1');",
  //         "$2"
  //     ],
  //     "description": "Log output to console"
  // }
  "React Class Component": {
    // "scope": "javascript,typescript",
    "prefix": "rcc",
    "body": [
      "// import React, { Component, PureComponent, Fragment, forwardRef } from 'react';",
      "// import PropTypes from 'prop-types';",
      "// import styled, { css } from 'styled-components';",
      "// import ReactRedux, { Provider } from 'react-redux';",
      "// import { BrowserRouter, Routes, Route, NavLink, useNavigate } from 'react-router-dom';",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends Component {",
      "",
      "  static defaultProps = { /*  props의 디폴트 값 설정 */ }",
      "  static propsTypes = {  /* props의 프로퍼티 타입 설정 */ }",
      "  state = {",
      "    // 상태값(변수)을 정의한다.",
      "",
      "  }",
      "  style = {",
      "    // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.",
      "    // getter 를 사용하면 객체 내부 참조가 가능하다.",
      "  ",
      "  }",
      "  func = {",
      "    // func에 정의된 메서드는 반드시 constructor에서 this를 bind() 처리해야 한다.",
      "    // func에는 자식 컴포넌트에 넘길 메서드만 작성한다.",
      "    // 왜 자식에게 부모 메서드를 넘기나? 부모의 상태값을 변경하기 위해서.",
      "  ",
      "  }",
      "  constructor(props) {",
      "    super()",
      "    // this 바인딩. 예시) this.func.handler = this.func.handler.bind(this);",
      "    // func 에 정의한 메서드는 반드시 this bind 처리해야 한다.",
      "    ",
      "    // ref 만들기. 예시) this.refInput = createRef()",
      "    ",
      "  }",
      "  componentWillMount() {",
      "  }",
      "  componentDidMount() {",
      "    // 마운트 완료 후에 실행됨 : 페이지 load 될 때 한번",
      "    // componentDidMount가 사용되는 경우: redux 구독 설정, focus 줄때",
      "    console.log('${1:${TM_FILENAME_BASE}} >> componentDidMount')",
      "  }",
      "  componentWillReceiveProps(nextProps) {",
      "    console.log('${1:${TM_FILENAME_BASE}} >> componentWillReceiveProps', nextProps)",
      "    // this.setState({ });",
      "  }",
      "  static getDerivedStateFromProps(nextProps, prevState) {",
      "    // props로 부터 파생된 state를 만드는 정적 메서드. 정적 메서드 이므로 this 롤 사용 할 수 없다.",
      "    console.log('${1:${TM_FILENAME_BASE}} >> getDerivedStateFromProops', nextProps, prevState)",
      "    return null;",
      "  }",
      "  shouldComponentUpdate(nextProps, nextState) {",
      "    // 컴포넌트 UI 를 업데이트 여부를 정한다. return true이면 ui 업데이트 하고 return false 이면 ui 업데이트 안함",
      "    console.log('${1:${TM_FILENAME_BASE}} >> shouldComponentUpdate', nextProps, nextState);",
      "    return true; // true or false",
      "  }",
      "  componentWillUpdate(nextProps, nextState) {",
      "    console.log('${1:${TM_FILENAME_BASE}} >> componentWillUpdate', nextProps, nextState);",
      "  }",
      "  componentDidUpdate(prevProps, prevState) {",
      "    // 업데이트 완료 후에 실행됨 : 여러번, state 가 변경될 때마다",
      "    console.log('${1:${TM_FILENAME_BASE}} >> componentDidUpdate', prevProps, prevState);",
      "  }",
      "  componentWillUnmount() {",
      "    // 언마운트 완료 후에 실행됨 : 페이지 unload 될 때 한번",
      "    // componentWillUnmount 가 사용되는 경우: redux 구독 해제, 이벤트 핸들러 해제",
      "    console.log('${1:${TM_FILENAME_BASE}} >> componentWillUnmount');",
      "  }",
      "  handler = (e)=>{",
      "    // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다",
      "    console.log(e.target);",
      "  }",
      "  render() { // JSX로 화면 만들기",
      "    return (",
      "      <div>",
      "        ${2:}",
      "      </div>",
      "    )",
      "  }",
      "};",
      "",
      "${1:${TM_FILENAME_BASE}}.propsTypes = {",
      "  // props의 프로퍼티 타입 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
      "  // 인자명: PropTypes.func.isRequired,",
      "};",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "  // props의 디폴트 값 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
      "  // 인자명: () => {},",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "React Class Component"
  },
  "React Functional Component At plugin": {
    // "scope": "javascript,typescript",
    "prefix": "rfc",
    "body": [
      "function ${1:${TM_FILENAME_BASE}}({",
      "  ...props",
      "}) {",
      "  // useState 를 사용한 컴포넌트의 상태값 설정",
      "  const [변수명, set변수명] = useState('기본값'); // 상태값이 기본타입인 경우",
      "",
      "  // ref 만들기.",
      "  // const refInput = useRef();",
      "  ",
      "  // refIsMounted는 생명주기의 마운트와 업데이트를 구분하기 위한 ref",
      "  const refIsMounted = useRef(false);",
      "  useEffect( () => {",
      "    if (refIsMounted.current){",
      "      // 업데이트 될 때마다 실행됨. 여러번. state 가 변경될 때마다",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentDidUpdate');",
      "    }",
      "    else {",
      "      // 마운트 완료 후에 실행됨. 한번만. focus 줄때",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentDidMount');",
      "      refIsMounted.current = true;",
      "    }",
      "    return () => {",
      "      // 언마운트 직전에 한번만 실행됨.",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentWillUmount');",
      "    };",
      "  }, [/* 연관배열: 메서드와 연관되는 상태(변수)명들을 기술 */]);",
      "  ",
      "  // callback 메서드 작성. callback 메서드는 부모의 공유 상태값을 변경하기 위해서 사용된다.",
      "  const callback = useCallback( (param)=>{",
      "    // state 변경",
      "  }, [/* 연관배열: 콜백 메서드에서 변경하고자 하는 연관되는 상태(변수)명들을 기술  */]);",
      "  ",
      "  // 이벤트 핸들러 작성.",
      "  const handler = (e)=>{",
      "    // 이벤트 핸들러는 화살표 함수로 만든다",
      "    console.log(e.target);",
      "  };",
      "  ",
      "  // JSX로 화면 만들기. 조건부 렌더링: https://ko.reactjs.org/docs/conditional-rendering.html",
      "  return (",
      "    <div>",
      "      ${1:${TM_FILENAME_BASE}}",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "React Functional Component At plugin"
  },
  "React Functional Component": {
    // "scope": "javascript,typescript",
    "prefix": "rfc2",
    "body": [
      "import React, { useState, useEffect, useRef, useCallback, useMemo, useReducer, Fragment, forwardRef, useImperativeHandle } from 'react';",
      "import PropTypes from 'prop-types';",
      "import styled, { css } from 'styled-components';",
      "import { BrowserRouter, Routes, Route, NavLink, useParams, useLocation, useHistory, useNavigate } from 'react-router-dom';",
      "",
      "const Styled${1:${TM_FILENAME_BASE}} = styled.div`",
      "  /* styled 설정. https://styled-components.com/docs/basics#adapting-based-on-props */",
      "",
      "`;",
      "",
      "function ${1:${TM_FILENAME_BASE}}({",
      "  ...props",
      "}) {",
      "  // useState 를 사용한 컴포넌트의 상태값 설정",
      "  const [변수명, set변수명] = useState('기본값'); // 상태값이 기본타입인 경우",
      "  const [state, setState] = useState({ id: 0, name: '', age: 0, }); // 상태값이 참조타입 경우",
      "",
      "  // useReducer 를 사용한 컴포넌트의 상태값 설정. 리듀서는 현재 상태를 받아서 새 상태를 반환하는 함수다",
      "  const [리듀서, set리듀서] = useReducer((oldvalue, newvalue)=>({...oldvalue, ...newvalue}), { id: 0, name: '', age: 0, }); // 리듀서(reducer) 방식의 상태값 설정",
      "  ",
      "  // ref 만들기.",
      "  // const refInput = useRef();",
      "  ",
      "  // refIsMounted는 생명주기의 마운트와 업데이트를 구분하기 위한 ref",
      "  const refIsMounted = useRef(false);",
      "  useEffect( () => {",
      "    if (refIsMounted.current){",
      "      // 업데이트 될 때마다 실행됨. 여러번. state 가 변경될 때마다",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentDidUpdate');",
      "    }",
      "    else {",
      "      // 마운트 완료 후에 실행됨. 한번만. focus 줄때",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentDidMount');",
      "      refIsMounted.current = true;",
      "    }",
      "    return () => {",
      "      // 언마운트 직전에 한번만 실행됨.",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentWillUmount');",
      "    };",
      "  }, [/* 연관배열: 메서드와 연관되는 상태(변수)명들을 기술 */]);",
      "  ",
      "  // callback 메서드 작성. callback 메서드는 부모의 공유 상태값을 변경하기 위해서 사용된다.",
      "  const callback = useCallback( (param)=>{",
      "    // state 변경",
      "  }, [/* 연관배열: 콜백 메서드에서 변경하고자 하는 연관되는 상태(변수)명들을 기술 */]);",
      "  ",
      "  // 이벤트 핸들러 작성.",
      "  const handler = (e)=>{",
      "    // 이벤트 핸들러는 화살표 함수로 만든다",
      "    console.log(e.target);",
      "  };",
      "  ",
      "  // JSX로 화면 만들기. 조건부 렌더링: https://ko.reactjs.org/docs/conditional-rendering.html",
      "  return (",
      "    <Styled${1:${TM_FILENAME_BASE}}>",
      "      <div>",
      "        ${1:${TM_FILENAME_BASE}}",
      "      </div>",
      "    </Styled${1:${TM_FILENAME_BASE}}>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  // props의 프로퍼티 타입 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
      "  // 인자명: PropTypes.func.isRequired,",
      "  // 인자명: PropTypes.arrayOf(PropTypes.object),",
      "};",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "  // props의 디폴트 값 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
      "  // 인자명: () => {},",
      "  // 인자명: [],",
      "};",
      "",
      "export default React.memo(${1:${TM_FILENAME_BASE}}); // React.memo()는 props 미변경시 컴포넌트 리렌더링 방지 설정"
    ],
    "description": "React Functional Component"
  },
  "React Functional Component with Redux": {
    // "scope": "javascript,typescript",
    "prefix": "rfcrdx",
    "body": [
      "import React, { useState, useEffect, useRef, useCallback, useMemo, useReducer, Fragment, forwardRef, useImperativeHandle } from 'react';",
      "import PropTypes from 'prop-types';",
      "import styled, { css } from 'styled-components';",
      "import { BrowserRouter, Routes, Route, NavLink, useParams, useLocation, useHistory, useNavigate } from 'react-router-dom';",
      "import { useDispatch, useSelector } from 'react-redux';",
      "// import { action함수 as actions, action상수 as types } from './action';",
      "",
      "const Styled${1:${TM_FILENAME_BASE}} = styled.div`",
      "  /* styled 설정. https://styled-components.com/docs/basics#adapting-based-on-props */",
      "",
      "`;",
      "",
      "function ${1:${TM_FILENAME_BASE}}({",
      "  ...props",
      "}) {",
      "  // redux store 와 연동되는 경우에만 useDispatch(), useSelector() 사용",
      "  // const dispatch = useDispatch();",
      "  // const { error, isLoading, notis } = useSelector( state => state.notis );",
      "",
      "",
      "  // 페이지에 대한 경로와 query-string 정보를 추출하는 경우 useLocation() 훅 사용",
      "  // const { pathname, search } = useLocation();",
      "",
      "  // path 변수를 추출하는 경우 useParams() 사용. id === match.params.id */",
      "  // const { id } = useParams();",
      "",
      "  // 이전 경로 useHistory() 사용 */",
      "  // const history = useHistory();",
      "",
      "",
      "  // useState 를 사용한 컴포넌트의 상태값 설정",
      "  const [변수명, set변수명] = useState('기본값'); // 상태값이 기본타입인 경우",
      "  const [state, setState] = useState({ id: 0, name: '', age: 0, }); // 상태값이 참조타입 경우",
      "",
      "  // useReducer 를 사용한 컴포넌트의 상태값 설정. 리듀서는 현재 상태를 받아서 새 상태를 반환하는 함수다",
      "  const [리듀서, set리듀서] = useReducer((oldvalue, newvalue)=>({...oldvalue, ...newvalue}), { id: 0, name: '', age: 0, }); // 리듀서(reducer) 방식의 상태값 설정",
      "  ",
      "  // ref 만들기.",
      "  // const refInput = useRef();",
      "  ",
      "  // refIsMounted는 생명주기의 마운트와 업데이트를 구분하기 위한 ref",
      "  const refIsMounted = useRef(false);",
      "  useEffect( () => {",
      "    if (refIsMounted.current){",
      "      // 업데이트 될 때마다 실행됨. 여러번. state 가 변경될 때마다",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentDidUpdate');",
      "    }",
      "    else {",
      "      // 마운트 완료 후에 실행됨. 한번만. focus 줄때",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentDidMount');",
      "      refIsMounted.current = true;",
      "    }",
      "    return () => {",
      "      // 언마운트 직전에 한번만 실행됨.",
      "      // console.log('${1:${TM_FILENAME_BASE}} >> componentWillUmount');",
      "    };",
      "  }, [/* 연관배열: 메서드와 연관되는 상태(변수)명들을 기술 */]);",
      "  ",
      "  // callback 메서드 작성. callback 메서드는 부모의 공유 상태값을 변경하기 위해서 사용된다.",
      "  const callback = useCallback( (param)=>{",
      "    // state 변경",
      "  }, [/* 연관배열: 콜백 메서드에서 변경하고자 하는 연관되는 상태(변수)명들을 기술 */]);",
      "  ",
      "  // 이벤트 핸들러 작성.",
      "  const handler = (e)=>{",
      "    // 이벤트 핸들러는 화살표 함수로 만든다",
      "    console.log(e.target);",
      "  };",
      "  ",
      "  // JSX로 화면 만들기. 조건부 렌더링: https://ko.reactjs.org/docs/conditional-rendering.html",
      "  return (",
      "    <Styled${1:${TM_FILENAME_BASE}}>",
      "      <div>",
      "        ${1:${TM_FILENAME_BASE}}",
      "      </div>",
      "    </Styled${1:${TM_FILENAME_BASE}}>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  // props의 프로퍼티 타입 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
      "  // 인자명: PropTypes.func.isRequired,",
      "  // 인자명: PropTypes.arrayOf(PropTypes.object),",
      "};",
      "${1:${TM_FILENAME_BASE}}.defaultProps = {",
      "  // props의 디폴트 값 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
      "  // 인자명: () => {},",
      "  // 인자명: [],",
      "};",
      "",
      "export default React.memo(${1:${TM_FILENAME_BASE}}); // React.memo()는 props 미변경시 컴포넌트 리렌더링 방지 설정"
    ],
    "description": "React Functional Component with Redux"
  },
  "Redux Class Component": {
    // "scope": "javascript,typescript",
    "prefix": "rdxc",
    "body": [
      "",
      "// React-Redux 작성 순서",
      "// 1. React-Redux 플러그인 추가 or import.",
      "// //import Redux, {createStore, combineReducers, applyMiddleware} from 'redux';",
      "// //import ReactRedux, {Provider} from 'react-redux';",
      "// console.log(window.Redux||'Redux import 오류');",
      "// console.log(window.ReactRedux||'ReactRedux import 오류');",
      "",
      "// //import logger from 'redux-logger';",
      "// console.log(window.logger||'logger import 오류');",
      "",
      "// //import { takeEvery, put, call, all, fork, spawn } from 'redux-saga/effects';",
      "",
      "// 2. action상수/함수 만들기. action상수에는 접두사를 붙인다.",
      "// const action상수 = { GET_TASK: 'task/READ', };",
      "// const action함수 = { getTask(task){ return { type: action상수.GET_TASK, payload: task } }, };",
      "",
      "// 3. middleware 만들기. ",
      "//    middleware 는 reducer 가 실행되기 전과 후에 실행되는 3중첩 함수다. 자바 스프링 AOP와 비슷",
      "//    middleware 는 mi.s.n.a.na 3중첩 함수다. mi: middleware, s:store, n: next, a: action, na: next(action)",
      "//    외부 API 호출은 middleware 에서 한다. saga 와 axios 를 사용",
      "//    const myMiddleware = store => next => action => next(action);",
      "",
      "// 4. reducer",
      "//    리듀서별로 상태값을 분리 할 수 있다.",
      "//    state에서 객체를 참조할 때는 객체의 레퍼런스가 아니라 고유한 값(id)으로 참조해야 한다.",
      "// 4-1. state 만들기.",
      "//    const state컴포넌트이름 = {'이름':[]};",
      "// 4-2. reducer 만들기.",
      "//    reducer 에서 state(불변 객체) 를 조작할 때는 immer 라이브러리를 사용하면 편리하다",
      "//    reducer 에서는 immer.produce( state, (draft)=>{...} )를 사용하여 state(불변 객체)를 처리한다",
      "//    const reducer컴포넌트목록 = ( function(name) { return createReducer( {[name]:[]} , { ... } ) } )('목록');",
      "//    const reducer컴포넌트이름 = function(state=state컴포넌트이름, action) { return immer.produce( state, (draft)=>{ const {type,payload} = action; switch(type){...}; }); };",
      "// 4-3. reducer 합치기. Redux.combineReducers() 사용하여 여러개의 리듀서를 하나로 합치기.",
      "//    reducer 별로 state 를 나누어 생성한다. ==> store의 state 형태 = { 이름s: {...},  목록: {...}, ... }",
      "//    const reducer = Redux.combineReducers({ ['이름s']: reducer컴포넌트이름, ['목록s']: reducer컴포넌트목록 });",
      "",
      "// 5. store 만들기. 리덕스 개발자 도구 적용. ",
      "//    store 는 state 가 저장되는 single source 객체. store는 한 개만 만든다.",
      "//    한 개의 store 안에 reducer 별로 state 가 만들어진다. ==> store의 state 형태 = { 이름s: {이름:...},  목록s: {...}, ... }",
      "//    const enhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;",
      "//    const store = Redux.createStore(reducer, /*preloadedState,*/ enhancers( /* Redux.applyMiddleware(myMiddleware) */ ) );",
      "",
      "// 6. 컴포넌트",
      "// 6-1. 컴포넌트 만들기",
      "// 6-2. mapStateToProps 만들기. props를 통해 store의 state 내림 설정. {...this.state}",
      "//    const mapStateToProps = (state) => { return { '이름s': state.이름s.이름S, } }; ",
      "// 6-3. mapCallbackToProps 만들기. props를 통해 callback method 내림 설정. {...this.func}",
      "//    const mapCallbackToProps = { ...action함수 };",
      "// 6-4. 컴포넌트와 redux store connect 하기. ",
      "//    컴포넌트이름 = ReactRedux.connect(mapStateToProps, mapCallbackToProps)(컴포넌트이름);",
      "",
      "// 7. 컴포넌트에 store 주입하기. ",
      "//    ReactRedux.Provider 는 store의 state가 변경되면 자동으로 render() 메서드를 실행되게 하는 컴포넌트다.",
      "//    ReactDOM.render(<ReactRedux.Provider store={store}> <컴포넌트이름 /> </ReactRedux.Provider>, document.getElementById(''))",
      ""
    ],
    "description": "Redux Class Component Script"
  },
  "Redux Function Component": {
    // "scope": "javascript,typescript",
    "prefix": "rdxf",
    "body": [
      "",
      "// React-Redux 코드 작성 순서",
      "// 1. 식별자 바꾸기",
      "컨테이너폴더명         를 www (소문자로 시작, 예시: counter) 로 바꾸기",
      "컨테이너명             를 yyy (대문자로 시작, 예시: Counter) 로 바꾸기",
      "컨테이너컴포넌트명     를 xxx (대문자로 시작, 예시: CounterContainer) 로 바꾸기",
      "상태값이름             를 zzz (소문자로 시작, 예시: counter) 로 바꾸기",
      "",
      "",
      "",
      "// 2. 폴더/파일 만들기",
      "프로젝트",
      "    └─ src # 소스 코드 폴더",
      "        └─ containers (컨테이너 컴포넌트)",
      "            └─ 컨테이너폴더명",
      "                ├─ components                    (컨테이너에서만 사용되는 프리젠테이션용 컴포넌트 폴더)",
      "                ├─ action.js                     (액션상수,액션함수 정의)",
      "                ├─ api.js                        (외부 api 호출 정의)",
      "                ├─ reducer.js                    (리덕스 리듀서)",
      "                ├─ saga.js                       (외부 API 호출 saga)",
      "                ├─ 컨테이너컴포넌트명.js     (컴포넌트 UI )",
      "                └─ 컨테이너컴포넌트명.css    (컴포넌트 css )",
      "",
      "$ pwd      # 현재 작업 폴더 위치 확인",
      "$ ls       # package.json 이 보이는지 확인",
      "$ mkdir -p src/containers/컨테이너폴더명/components",
      "$ cd    src/containers/컨테이너폴더명",
      "$ pwd      # 현재 작업 폴더 위치 확인",
      "$ ls       # 현재 작업 폴더의 파일 목록 확인",
      "$ touch action.js saga.js api.js reducer.js 컨테이너컴포넌트명.js 컨테이너컴포넌트명.css",
      "$ ls",
      "",
      "",
      "",
      "// 3. action 만들기. action상수와 action함수를 만든다.",
      "// src/containers/컨테이너폴더명/action.js",
      "const prefix = `컨테이너폴더명`; // action상수에는 접두사를 붙인다.",
      "",
      "export const action상수 = {",
      "  GET_ERROR: `${ prefix }/GET_ERROR`,",
      "  SET_ERROR: `${ prefix }/SET_ERROR`,",
      "  GET_LOADING: `${ prefix }/GET_LOADING`,",
      "  SET_LOADING: `${ prefix }/SET_LOADING`,",
      "  GET_TASK_SAGA: `${ prefix }/GET_TASK_SAGA`,",
      "  SET_TASK_SAGA: `${ prefix }/SET_TASK_SAGA`,",
      "  GET_TASK_REDUCER: `${ prefix }/GET_TASK_REDUCER`,",
      "  SET_TASK_REDUCER: `${ prefix }/SET_TASK_REDUCER`,",
      "};",
      "",
      "export const action함수 = {",
      "  getError() {",
      "    return {",
      "      type: action상수.GET_ERROR,",
      "    };",
      "  },",
      "  setError(error) {",
      "    return {",
      "      type: action상수.SET_ERROR,",
      "      payload: error,",
      "    };",
      "  },",
      "  getLoading() {",
      "    return {",
      "      type: action상수.GET_LOADING,",
      "    };",
      "  },",
      "  setLoading(isLoading) {",
      "    return {",
      "      type: action상수.SET_LOADING,",
      "      payload: isLoading,",
      "    };",
      "  },",
      "  getTaskSaga(payload) {",
      "    return {",
      "      type: action상수.GET_TASK_SAGA,",
      "      payload,",
      "    };",
      "  },",
      "  setTaskSaga(payload) {",
      "    return {",
      "      type: action상수.SET_TASK_SAGA,",
      "      payload,",
      "    };",
      "  },",
      "  getTaskReducer(payload) {",
      "    return {",
      "      type: action상수.GET_TASK_REDUCER,",
      "      payload,",
      "    };",
      "  },",
      "  setTaskReducer(payload) {",
      "    return {",
      "      type: action상수.SET_TASK_REDUCER,",
      "      payload,",
      "    };",
      "  },",
      "};",
      "",
      "",
      "",
      "// 4. saga 만들기",
      "// src/containers/컨테이너폴더명/saga.js",
      "import { takeLatest, put, call, all, delay } from 'redux-saga/effects';",
      "import { action함수 as actions, action상수 as types } from './action';",
      "import * as api from './api';",
      "",
      "/* saga 이펙트 함수 설명",
      "",
      " * saga 실행 순서 : TPC(take[Latest}, put, call)",
      "",
      " * takeLatest      마지막 요청만 처리. 기존에 진행 중인 작업은 취소됨.",
      " *                 클릭 실수로 2번 했을때, 앞 이벤트 무시 마지막 이벤트 실행(보통 이거 많이씀)",
      " * takeEvery       들어오는 모든 작업을 처리한다. 중복 실행됨. 이벤트 계속 리슨",
      " * takeLeading     첫번째 요청만 실행, 이후 요청은 무시",
      " * take            한번만 실행되고 이벤트 삭제됨",
      " * ",
      " * put             특정 액션을 dispatch 한다.",
      " * ",
      " * call            call은 함수를 동기식으로 실행한다(동기식: 외부 api가 리턴할때까지 기다림).",
      " *                 함수의 첫 번째 파라미터는 함수, 나머지 파라미터는 해당 함수에 넣을 인수이다.",
      " * ",
      " * delay           설정된 시간 이후에 resolve하는 Promise객체를 리턴한다.",
      " * all             all함수를 사용해서 제너레이터 함수를 배열의 형태로 인자로 넣어주면,",
      " *                 제너레이터 함수들이 병행적으로 동시에 실행되고, 전부 resolve될때까지 기다린다. 받은 이펙트를 등록 (실행 아님, 등록임!!)",
      " *                 Promise.all과 비슷하다고 보면된다.",
      " */",
      "",
      "export function* getPromise(action) {",
      "  try {",
      "    yield put(actions.setLoading(true)); // 액션 디스패치",
      "    // yield delay(2000); // 2초 기다리기",
      "    const result = yield call(api.getPromise, action.payload);",
      "",
      "    // 액션함수를 이용하여 전달될 payload 생성",
      "    const payload = actions.setTaskReducer(result.data)",
      "    yield put(payload); // payload를 리듀서로 dispatch 하기",
      "    yield put(actions.setError(''));",
      "  } catch (e) {",
      "    console.log(e);",
      "    yield put(actions.setError(e));",
      "  }",
      "  yield put(actions.setLoading(false)); // 액션 디스패치",
      "}",
      "",
      "export function* getTaskSaga(action) {",
      "  try {",
      "    yield put(actions.setLoading(true)); // 액션 디스패치",
      "    // yield delay(2000); // 2초 기다리기",
      "    debugger;",
      "    const result = yield call(api.callApi, action.payload);",
      "    // 액션함수를 이용하여 전달될 payload 생성",
      "    debugger;",
      "    const payload = { counter:result.data };",
      "    yield put(actions.setTaskReducer(payload)); // payload를 리듀서로 dispatch 하기",
      "    yield put(actions.setError(''));",
      "  } catch (e) {",
      "    console.log(e);",
      "    yield put(actions.setError(e));",
      "  }",
      "  yield put(actions.setLoading(false)); // 액션 디스패치",
      "}",
      "",
      "export function* setTaskSaga(action) {",
      "  try {",
      "    yield put(actions.setLoading(true)); // 액션 디스패치",
      "    // yield delay(2000); // 2초 기다리기",
      "    debugger;",
      "    const result = yield call(api.callApi, action.payload);",
      "    // 액션함수를 이용하여 전달될 payload 생성",
      "    debugger;",
      "    const payload = { counter:result.data };",
      "    yield put(actions.setTaskReducer(payload)); // payload를 리듀서로 dispatch 하기",
      "    yield put(actions.setError(''));",
      "  } catch (e) {",
      "    console.log(e);",
      "    yield put(actions.setError(e));",
      "  }",
      "  yield put(actions.setLoading(false)); // 액션 디스패치",
      "}",
      "",
      "export function* actionWatcher() {",
      "  // yield takeLatest(types.GET_PROMISE, getPromise);",
      "  yield takeLatest(types.GET_TASK_SAGA, getTaskSaga);",
      "  yield takeLatest(types.SET_TASK_SAGA, setTaskSaga);",
      "}",
      "",
      "export default function* rootSaga() {",
      "  yield all([",
      "    actionWatcher()",
      "  ]);",
      "}",
      "",
      "",
      "",
      "// 5. API 만들기",
      "// src/containers/컨테이너폴더명/api.js",
      "import axios from 'axios';",
      "",
      "export function getPromise(params) {",
      "  return new Promise( (resolve, reject) => {",
      "    setTimeout( ()=>{",
      "      const randnum = Math.random();",
      "      if (randnum * 10 < 8) {",
      "        const result = {",
      "          data: {",
      "            ...params,",
      "            time: new Date().toLocaleTimeString(),",
      "            value: randnum,",
      "          },",
      "        };",
      "        resolve(result);",
      "      } else {",
      "        reject('getPromise 실패');",
      "      }",
      "    }, 1000);",
      "  });",
      "}",
      "",
      "export function callApi( params ) {",
      "  return axios({",
      "    url: 'http://localhost:5050/counter',  // 호출되는 서버 주소.",
      "    method: 'get',       // request method: get, post, delete, put",
      "    params: { ...params },  // 서버로 보내는 데이터. { data1:'test1', data2:'test2' }",
      "    timeout: 30000,    // 최대 대기 시간: 30초. 30초 이상이 되면 fail 부분이 실행됨.",
      "    responseType: 'json',  // response로 넘어오는 데이터 형태: text, html, xml, json, jsonp, script",
      "  });",
      "}",
      "",
      "",
      "",
      "// 6. reducer 만들기",
      "// src/containers/컨테이너폴더명/reducer.js",
      "// 리듀서별로 상태값을 분리 할 수 있다.",
      "// reducer 에서 state(불변 객체) 를 조작할 때는 immer 라이브러리를 사용하면 편리하다",
      "// reducer 에서는 immer.produce( state, (draft)=>{...} )를 사용하여 state(불변 객체)를 처리한다",
      "// state에서 객체를 참조할 때는 객체의 레퍼런스가 아니라 고유한 값(id)으로 참조해야 한다.",
      "import { produce } from 'immer';",
      "import { action상수 as types } from './action';",
      "",
      "const setError = (state, payload) => {",
      "  return produce(state, (draft) => {",
      "    draft.error = payload;",
      "  });",
      "};",
      "",
      "const setLoading = (state, payload) => {",
      "  return produce(state, (draft) => {",
      "    draft.isLoading = payload;",
      "  });",
      "};",
      "",
      "const setTaskReducer = (state, payload) => {",
      "  return produce(state, (draft) => {",
      "    debugger;",
      "    // draft.상태값이름.push(payload);",
      "    draft.상태값이름 = payload.상태값이름;",
      "    draft.isLoading = false;",
      "  });",
      "};",
      "",
      "const state컨테이너명 = {",
      "  error: null,",
      "  isLoading: false,",
      "  // 상태값이름: [],",
      "  상태값이름: 0,",
      "};",
      "",
      "const reducer컨테이너명 = (state = state컨테이너명, action) => {",
      "  switch (action.type) {",
      "    case types.SET_ERROR:",
      "      return setError(state, action.payload);",
      "    case types.SET_LOADING:",
      "      return setLoading(state, action.payload);",
      "    case types.SET_TASK_REDUCER:",
      "      return setTaskReducer(state, action.payload);",
      "    default:",
      "      return state;",
      "  }",
      "};",
      "",
      "export default reducer컨테이너명;",
      "",
      "",
      "",
      "// 7. 프로젝트용 reducer 합치기. ",
      "// src/reducers/index.js",
      "// reducer 별로 만들어진 state 를 store에서 하나의 state로 합친다.",
      "// Redux.combineReducers() 사용하면 여러개의 리듀서를 하나로 합치기는 것이 가능하다.",
      "import { combineReducers } from 'redux';",
      "",
      "import reducer컨테이너명 from '../containers/컨테이너폴더명/reducer';",
      "// import reducer컴포넌트목록 from '../containers/컴포넌트목록/reducer';",
      "",
      "const reducers = combineReducers({",
      "  상태값이름: reducer컨테이너명,",
      "  // 상태값목록: reducer컴포넌트목록,",
      "});",
      "",
      "export default reducers;",
      "",
      "",
      "",
      "// 8. 프로젝트용 store 만들기. ",
      "// src/store/index.js 수정",
      "// 개별 saga 를 store 에 연결한다.",
      "import { createStore, applyMiddleware, compose } from 'redux';",
      "import createSagaMiddleware from 'redux-saga';",
      "import logger from 'redux-logger';",
      "",
      "import reducers from '../reducers';",
      "import saga컨테이너명 from '../containers/컨테이너폴더명/saga';",
      "// import saga컴포넌트목록 from '../containers/컴포넌트목록/saga';",
      "",
      "const sagaMiddleware = createSagaMiddleware(); // saga 미들웨어 생성.",
      "const enhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;",
      "const store = createStore(reducers, /*preloadedState,*/ enhancers( applyMiddleware(sagaMiddleware, logger) ) );",
      "",
      "// 스토어 생성 후 sagaMiddleware 에 개별 saga를 추가해야 합니다.",
      "// 중요사항. 순서를 바꾸면 안된다. createSagaMiddleware() 후에 개별 saga를 추가해야 합니다.",
      "sagaMiddleware.run(saga컨테이너명);",
      "// sagaMiddleware.run(saga컴포넌트목록);",
      "",
      "export default store;",
      "",
      "",
      "",
      "// 9. 컴포넌트에 store 주입하기. ",
      "// src/index.js",
      "import React from 'react';",
      "import ReactDOM from 'react-dom/client';",
      "import './index.css';",
      "import App from './App';",
      "import reportWebVitals from './reportWebVitals';",
      "",
      "// redux store 임포트",
      "import store from './store';",
      "",
      "// ReactRedux.Provider 는 store의 state가 변경되면 자동으로 render() 메서드를 실행되게 하는 컴포넌트다.",
      "import { Provider } from 'react-redux';",
      "import { BrowserRouter } from 'react-router-dom';",
      "",
      "const root = ReactDOM.createRoot(document.getElementById('root'));",
      "root.render(",
      "  <React.StrictMode>",
      "    <Provider store={store}>",
      "      <BrowserRouter>",
      "        <App />",
      "      </BrowserRouter>",
      "    </Provider>",
      "  </React.StrictMode>,",
      ");",
      "",
      "",
      "",
      "// 10. 컴포넌트 만들기",
      "// src/containers/컨테이너폴더명/컨테이너컴포넌트명.js",
      "// 단축키 rfc 로 컴포넌트 Scaffolding 만들기",
      "// 10-1. action import",
      "// 10-2. redux store 와 연동되는 경우에만 useDispatch(), useSelector() 훅  사용 설정"
    ],
    "description": "Redux Function Component Script"
  },
  "call a saga function": {
    // "scope": "javascript,typescript",
    "prefix": "callsaga1",
    "body": [
      "",
      "// 호출되는 saga 함수",
      "function* checkLastId(params) {",
      "  let lastId = '';",
      "  const { response, error } = yield call(api.getCheckLastId, params);",
      "  if (response && !error) {",
      "    lastId = response.rid;",
      "  }",
      "  else {",
      "  }",
      "",
      "  return lastId;",
      "}",
      "",
      "// saga 함수 안에서 다른 saga 함수 호출하기",
      "const lastId = yield* checkLastId(objId);"
    ],
    "description": "saga 함수 안에서 다른 saga 함수 호출하기"
  },
  "call a general function": {
    // "scope": "javascript,typescript",
    "prefix": "callsaga2",
    "body": [
      "",
      "// 호출되는 일반 함수",
      "function checkLastId(objId) {",
      "  const params = { objId };",
      "  return api.getCheckLastId(params);",
      "}",
      "",
      "// saga 함수 안에서 일반 함수 호출하기",
      "const lastId = yield checkLastId(objId);"
    ],
    "description": "saga 함수 안에서 일반 함수 호출하기"
  },
  "call a sync function": {
    // "scope": "javascript,typescript",
    "prefix": "callsync1",
    "body": [
      "",
      "// saga 함수 안에서 sync 방식으로 함수 호출하기",
      "files.forEach( async (file) => {",
      "  await api.getCheckLastId(params);",
      "});"
    ],
    "description": "saga 함수 안에서 sync 방식으로 함수 호출하기"
  },
  "call a redux state": {
    // "scope": "javascript,typescript",
    "prefix": "callreduxstate",
    "body": [
      "",
      "// redux state 가져오는 함수 만들기",
      "const getAuth = state => state.auth;",
      "",
      "// saga 함수 안에서 redux state 가져오는 함수 호출하기",
      "const authInfo = yield select(getAuth);"
    ],
    "description": "saga 함수 안에서 redux state 가져오는 함수 호출하기"
  },
  "styled component": {
    // "scope": "javascript,typescript",
    "prefix": "styled",
    "body": [
      "// import styled, { css } from 'styled-components';",
      "const Styled${1:${TM_FILENAME_BASE}} = styled.div`",
      "  /* https://styled-components.com/docs/basics#adapting-based-on-props */",
      "  padding: 10px;",
      "  color: #FFFFFF;",
      "  background-color: ${(props) => props.backgroundColor || '#304FFE'};",
      "",
      "  &:hover {",
      "    background-color: ${(props) => props.hoverColor || '#1E40FF'};",
      "  }",
      "",
      "  &:active {",
      "    box-shadow: inset 5px 5px 10px rgba(0,0,0,0.2);",
      "  }",
      "",
      "  ${(props) => {",
      "    return props.huge && css`",
      "      width: 10rem;",
      "      height: 10rem;",
      "    `",
      "  }}",
      "`;"
    ],
    "description": "styled component 를 사용하여 스타일 작성하기"
  },
  "React script import": {
    // "scope": "javascript,typescript",
    "prefix": "reactplugin",
    "body": [
      "",
      "<script src=\"https://unpkg.com/@babel/standalone/babel.js\"  crossorigin=\"anonymous\">",
      "    /* 자바스크립트로 컴파일러. ES6-->ES5, JSX-->ES5 */",
      "</script>",
      "<script src=\"http://unpkg.com/react@17/umd/react.development.js\" crossorigin=\"anonymous\">",
      "    /* import React, { Component, PureComponent } from 'react' */",
      "</script>",
      "<script src=\"http://unpkg.com/react-dom@17/umd/react-dom.development.js\" crossorigin=\"anonymous\">",
      "    /* import ReactDOM from 'react-dom' */",
      "</script>",
      // "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.8.1/prop-types.js\" crossorigin=\"anonymous\">",
      // "</script>",
      // "<script src=\"http://unpkg.com/react-is@17/umd/react-is.development.js\"  crossorigin=\"anonymous\">",
      // "</script>",
      // "<script src=\"http://unpkg.com/styled-components@5/dist/styled-components.js\" crossorigin=\"anonymous\">",
      // "    /*  import styled, { css } from 'styled-components' */",
      // "</script>",
      // "<script src=\"http://unpkg.com/react-router-dom@6/umd/react-router-dom.development.js\" crossorigin=\"anonymous\">",
      // "    /*  import {BrowserRouter, Routes, Route, NavLink, useParams, useLocation, useHistory, useNavigate} from 'react-router-dom' */",
      // "</script>",
      // "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/7.2.8/react-redux.js\" crossorigin=\"anonymous\">",
      // "    /*  import ReactRedux, {Provider, useDispatch, useSelector} from 'react-redux' */",
      // "</script>",
      // "<script src=\"https://unpkg.com/core-js-bundle/index.js\" crossorigin=\"anonymous\">",
      // "    /* Babel v7.4.0 이후부터 Babel Polyfill은 deprecated. 대신 core-js 스크립트를 사용 */",
      // "</script>",
      // "<script src=\"https://unpkg.com/regenerator-runtime/runtime.js\" crossorigin=\"anonymous\">",
      // "    /* Babel v7.4.0 이후부터 Babel Polyfill은 deprecated. 대신 regenerator-runtime 스크립트를 사용 */",
      // "</script>",
      // "<script src=\"https://unpkg.com/immer\" crossorigin=\"anonymous\">",
      // "    /* 불변객체 state를 조작하는 라이브러리. import immer from 'immer' */",
      // "</script>",
      "<script type=\"text/babel\">",
      "",
      "    const { useState, useEffect, useRef, useCallback, useMemo, useReducer, Fragment } = React;",
      "",
      "    // id=\"app\" 인 태그 에 컴포넌트를 화면에 붙이시오",
      "    // ReactDOM.render( 인자1, 인자2 )",
      "    ReactDOM.render(<컴포넌트이름 />, document.getElementById('app'));",
      "",
      "   // 단축키 rfc",
      "</script>"
    ],
    "description": "React script"
  }
}
