

code snippets 만들기 동영상: https://www.youtube.com/watch?v=t4ESp_po6Wc




    "React Class Component": {
        "prefix": "rcc",
        "body": [
            "// import React, { Component, PureComponent, Fragment } from 'react';",
            "// import PropTypes from 'prop-types';",
            "// import ReactRedux, { Provider } from 'react-redux';",
            "// import { BrowserRouter, Routes, Route, NavLink } from 'react-router-dom';",
            "",
            "class ${1:${TM_FILENAME_BASE}} extends Component {",
            "",
            "    static defaultProps = { /*  props의 디폴트 값 설정 */ }",
            "    static propsTypes = {  /* props의 프로퍼티 타입 설정 */ }",
            "    state = {",
            "        // 상태값(변수)을 정의한다.",
            "",
            "    }",
            "    style = {",
            "        // 컴포넌트 내부에서 사용할 인라인 스타일을 정의한다.",
            "        // getter 를 사용하면 객체 내부 참조가 가능하다.",
            "    ",
            "    }",
            "    func = {",
            "        // func에 정의된 메서드는 반드시 constructor에서 this를 bind() 처리해야 한다.",
            "        // func에는 자식 컴포넌트에 넘길 메서드만 작성한다.",
            "        // 왜 자식에게 부모 메서드를 넘기나? 부모의 상태값을 변경하기 위해서.",
            "    ",
            "    }",
            "    constructor(props) {",
            "        super()",
            "        // this 바인딩. 예시) this.func.handler = this.func.handler.bind(this);",
            "        // func 에 정의한 메서드는 반드시 this bind 처리해야 한다.",
            "        ",
            "        // ref 만들기. 예시) this.refInput = createRef()",
            "        ",
            "    }",
            "    componentDidMount() {",
            "        // 마운트 완료 후에 실행됨 : 페이지 load 될 때 한번",
            "        // componentDidMount가 사용되는 경우: redux 구독 설정, focus 줄때",
            "    }",
            "    componentDidUpdate(prevProps, prevState) {",
            "        // 업데이트 완료 후에 실행됨 : 여러번, state 가 변경될 때마다",
            "    }",
            "    componentWillUnmount() {",
            "        // 언마운트 완료 후에 실행됨 : 페이지 unload 될 때 한번",
            "        // componentWillUnmount가 사용되는 경우: redux 구독 해제, 이벤트 핸들러 해제",
            "    }",
            "    handler = (event)=>{",
            "        // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다",
            "        console.log(event.target);",
            "    }",
            "    render() { // JSX로 화면 만들기",
            "        return (",
            "            <div>",
            "                ${2:}",
            "            </div>",
            "        )",
            "    }",
            "};",
            "",
            "${1:${TM_FILENAME_BASE}}.propsTypes = {",
            "    // props의 프로퍼티 타입 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
            "    // 인자명: PropTypes.func.isRequired,",
            "};",
            "${1:${TM_FILENAME_BASE}}.defaultProps = {",
            "    // props의 디폴트 값 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
            "    // 인자명: () => {},",
            "};",
            "",
            "export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Class Component"
    },
    "React Functional Component": {
        "prefix": "rfc",
        "body": [
            "// import React, { useState, useEffect, useRef, useCallback, useMemo, Fragment } from 'react';",
            "// import PropTypes from 'prop-types';",
            "// import { useDispatch, useSelector } from 'react-redux';",
            "// import ReactRouterDOM, { BrowserRouter, Routes, Route, NavLink, useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';",
            "",
            "const { useState, useEffect, useRef, useCallback, useMemo, Fragment } = React;",
            "",
            "function ${1:${TM_FILENAME_BASE}}(props) {",
            "",
            "    // redux store 와 연동되는 경우에만 useDispatch(), useSelector() 사용",
            "    // const dispatch = useDispatch();",
            "    // const { isLoading, notis } = useSelector( state => state.notis );",
            "",
            "    // 컴포넌트의 상태값 설정",
            "    const [변수명, set변수명] = useState('기본값'); // 상태값이 기본타입인 경우",
            "    const [state, setState] = useState({ id: 0, name: '', age: 0, }); // 상태값이 참조타입 경우",
            "    ",
            "    // ref 만들기. 예시) const refInput = useRef();",
            "    ",
            "    // refIsMounted는 생명주기의 마운트와 업데이트를 구분하기 위한 ref",
            "    const refIsMounted = useRef(false);",
            "    useEffect( () => {",
            "        if (refIsMounted.current){",
            "            // 업데이트 될 때마다 실행됨. 여러번. state 가 변경될 때마다",
            "            console.log('componentDidUpdate');",
            "        }",
            "        else {",
            "            // 마운트 완료 후에 실행됨. 한번만. focus 줄때",
            "            console.log('componentDidMount');",
            "            refIsMounted.current = true;",
            "        }",
            "    });",
            "   ",
            "    // callback 메서드 작성. callback 메서드는 부모의 공유 상태값을 변경하기 위해서 사용된다.",
            "    const callback = useCallback( (param)=>{",
            "        // state 변경",
            "    }, [/* 메서드와 연관되는 상태(변수)명들을 기술 */]);",
            "    ",
            "    // 이벤트 핸들러 작성.",
            "    const handler = (event)=>{",
            "        // 이벤트 핸들러는 화살표 함수로 만들면 this bind()를 생략해도 된다",
            "        console.log(event.target);",
            "    };",
            "    ",
            "    // JSX로 화면 만들기",
            "    return (",
            "        <div>",
            "            ${2:}",
            "        </div>",
            "    )",
            "}",
            "",
            "${1:${TM_FILENAME_BASE}}.propTypes = {",
            "    // props의 프로퍼티 타입 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
            "    // 인자명: PropTypes.func.isRequired,",
            "};",
            "${1:${TM_FILENAME_BASE}}.defaultProps = {",
            "    // props의 디폴트 값 설정. https://ko.reactjs.org/docs/typechecking-with-proptypes.html",
            "    // 인자명: () => {},",
            "};",
            "",
            "export default ${1:${TM_FILENAME_BASE}};"
        ],
        "description": "React Functional Component"
    },
    "Redux Class Component": {
        "prefix": "rdxc",
        "body": [
            "",
            "// React-Redux 작성 순서",
            "// 1. React-Redux 플러그인 추가 or import.",
            "// //import Redux, {createStore, combineReducers, applyMiddleware} from 'redux';",
            "// //import ReactRedux, {Provider} from 'react-redux';",
            "// console.log(window.Redux||'Redux import 오류');",
            "// console.log(window.ReactRedux||'ReactRedux import 오류');",
            "",
            "// //import logger from 'redux-logger';",
            "// console.log(window.logger||'logger import 오류');",
            "",
            "// //import { takeEvery, put, call, all, fork, spawn } from 'redux-saga/effects';",
            "",
            "// 2. action상수/함수 만들기. action상수에는 접두사를 붙인다.",
            "// const action상수 = { GET_TASK: 'task/READ', };",
            "// const action함수 = { getTask(task){ return { type: action상수.GET_TASK, payload: task } }, };",
            "",
            "// 3. middleware 만들기. ",
            "//    middleware 는 reducer 가 실행되기 전과 후에 실행되는 3중첩 함수다. 자바 스프링 AOP와 비슷",
            "//    middleware 는 mi.s.n.a.na 3중첩 함수다. mi: middleware, s:store, n: next, a: action, na: next(action)",
            "//    외부 API 호출은 middleware 에서 한다. saga 와 axios 를 사용",
            "//    const myMiddleware = store => next => action => next(action);",
            "",
            "// 4. reducer",
            "//    리듀서별로 상태값을 분리 할 수 있다.",
            "//    state에서 객체를 참조할 때는 객체의 레퍼런스가 아니라 고유한 값(id)으로 참조해야 한다.",
            "// 4-1. state 만들기.",
            "//    const state이름 = {'이름':[]};",
            "// 4-2. reducer 만들기.",
            "//    reducer 에서 state(불변 객체) 를 조작할 때는 immer 라이브러리를 사용하면 편리하다",
            "//    reducer 에서는 immer.produce( state, (draft)=>{...} )를 사용하여 state(불변 객체)를 처리한다",
            "//    const reducer목록 = ( function(name) { return createReducer( {[name]:[]} , { ... } ) } )('목록');",
            "//    const reducer이름 = function(state=state이름, action) { return immer.produce( state, (draft)=>{ const {type,payload} = action; switch(type){...}; }); };",
            "// 4-3. reducer 합치기. Redux.combineReducers() 사용하여 여러개의 리듀서를 하나로 합치기.",
            "//    reducer 별로 state 를 나누어 생성한다. ==> store의 state 형태 = { 이름s: {...},  목록: {...}, ... }",
            "//    const reducer = Redux.combineReducers({ ['이름s']: reducer이름, ['목록s']: reducer목록 });",
            "",
            "// 5. store 만들기. 리덕스 개발자 도구 적용. ",
            "//    store 는 state 가 저장되는 single source 객체. store는 한 개만 만든다.",
            "//    한 개의 store 안에 reducer 별로 state 가 만들어진다. ==> store의 state 형태 = { 이름s: {이름:...},  목록s: {...}, ... }",
            "//    const enhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;",
            "//    const store = Redux.createStore(reducer, /*preloadedState,*/ enhancers( /* Redux.applyMiddleware(myMiddleware) */ ) );",
            "",
            "// 6. 컴포넌트",
            "// 6-1. 컴포넌트 만들기",
            "// 6-2. mapStateToProps 만들기. props를 통해 store의 state 내림 설정. {...this.state}",
            "//    const mapStateToProps = (state) => { return { '이름s': state.이름s.이름S, } }; ",
            "// 6-3. mapCallbackToProps 만들기. props를 통해 callback method 내림 설정. {...this.func}",
            "//    const mapCallbackToProps = { ...action함수 };",
            "// 6-4. 컴포넌트와 store connect 하기. ",
            "//    컴포넌트명 = ReactRedux.connect(mapStateToProps, mapCallbackToProps)(컴포넌트명);",
            "",
            "// 7. 컴포넌트에 store 주입하기. ",
            "//    ReactRedux.Provider 는 store의 state가 변경되면 자동으로 render() 메서드를 실행되게 하는 컴포넌트다.",
            "//    ReactDOM.render(<ReactRedux.Provider store={store}> <컴포넌트명 /> </ReactRedux.Provider>, document.getElementById(''))",
            "",
        ],
        "description": "Redux Class Component Script"
    },
    "Redux Function Component": {
        "prefix": "rdxf",
        "body": [
            "",
            "// React-Redux 작성 순서",
            "// 0. 폴더/파일 만들기",
            "touch action.js api.js reducer.js saga.js index.js",
            "",
            "// 1. React-Redux 플러그인 추가 or import.",
            "// console.log(window.Redux||'Redux import 오류');",
            "// console.log(window.ReactRedux||'ReactRedux import 오류');",
            "// console.log(window.logger||'logger import 오류');",
            "",
            "// 2. action 만들기. action상수/action함수",
            "// src/containers/컴포넌트이름/action.js",
            "const prefix = `task`; // action상수에는 접두사를 붙인다.",
            "",
            "export const action상수 = {",
            "    GET_ERROR: `${ prefix }/GET_ERROR`,",
            "    TASK_LOADING: `${ prefix }/LOADING`,",
            "    GET_TASK: `${ prefix }/GET_TASK`,",
            "    SET_TASK: `${ prefix }/SET_TASK`,",
            "};",
            "",
            "export const action함수 = {",
            "    taskLoading(isLoading){",
            "        return {",
            "            type: action상수.TASK_LOADING,",
            "            payload: isLoading,",
            "        }",
            "    },",
            "    getTask(task){",
            "        return {",
            "            type: action상수.GET_TASK,",
            "            payload: task,",
            "        }",
            "    },",
            "    setTask(task){",
            "        return {",
            "            type: action상수.SET_TASK,",
            "            payload: task,",
            "        }",
            "    },",
            "};",
            "",
            "// 3. API 만들기",
            "// src/containers/컴포넌트이름/api.js",
            "import axios from 'axios';",
            "",
            "export function getPromise( params ) {",
            "  return new Promise( (resolve, reject) => {",
            "    const result = {",
            "      data: {",
            "        time: new Date().toLocaleTimeString(),",
            "        value: 100,",
            "      }",
            "    };",
            "    resolve(result);",
            "  });",
            "}",
            "",
            "export function callApi( params ) {",
            "  return axios({",
            "    url: 'http://localhost:5050/getnextdata?name=timelines',  // 호출되는 서버 주소.",
            "    method: 'get',       // request method: get, post, delete, put",
            "    params: { ...params },  // 서버로 보내는 데이터. { data1:'test1', data2:'test2' }",
            "    timeout: 30000,    // 최대 대기 시간: 30초. 30초 이상이 되면 fail 부분이 실행됨.",
            "    responseType: 'json',  // response로 넘어오는 데이터 형태: text, html, xml, json, jsonp, script",
            "  });",
            "}",
            "",
            "// 4. saga 만들기",
            "// src/containers/컴포넌트이름/saga.js",
            "import { takeLatest, put, call, delay } from 'redux-saga/effects';",
            "import { action함수 as actions, action상수 as types } from './action';",
            "import { getPromise/* , callApi */ } from './api';",
            "",
            "export function* getData(action) {",
            "  try {",
            "    yield put(actions.taskLoading(true)); // 액션 디스패치",
            "    yield delay(2000); // 2초 기다리기",
            "    const result = yield call(getPromise, action.payload);",
            "    yield put(actions.setTask(result.data)); // 액션 디스패치",
            "  } catch (e) {",
            "    console.log(e);",
            "    yield put({ type: types.GET_ERROR, error: true, payload: e});",
            "  }",
            "}",
            "",
            "export default function* watcher() {",
            "  yield takeLatest(types.GET_TASK, getData);",
            "}",
            "",
            "// 5. reducer 만들기",
            "// src/containers/컴포넌트이름/reducer.js",
            "// 리듀서별로 상태값을 분리 할 수 있다.",
            "// reducer 에서 state(불변 객체) 를 조작할 때는 immer 라이브러리를 사용하면 편리하다",
            "// reducer 에서는 immer.produce( state, (draft)=>{...} )를 사용하여 state(불변 객체)를 처리한다",
            "// state에서 객체를 참조할 때는 객체의 레퍼런스가 아니라 고유한 값(id)으로 참조해야 한다.",
            "import { produce } from 'immer';",
            "import { action상수 as types } from './action';",
            "",
            "const setIsLoading = (state, payload) => {",
            "  return produce(state, (draft) => {",
            "    draft.isLoading = payload;",
            "  });",
            "};",
            "",
            "const setTask = (state, payload) => {",
            "  return produce(state, (draft) => {",
            "    draft.이름s = payload;",
            "    draft.isLoading = false;",
            "  });",
            "};",
            "",
            "const state이름 = {",
            "  isLoading: false,",
            "  이름s: [],",
            "};",
            "const reducer이름 = (state=state이름, action)=>{",
            "  switch(action.type){",
            "    case types.TASK_LOADING:",
            "      return setIsLoading(state, action.payload);",
            "    case types.SET_TASK:",
            "      return setTask(state, action.payload);",
            "    default:",
            "      return state;",
            "  }",
            "};",
            "export default reducer이름;",
            "",
            "// 6. 프로젝트용 reducer 합치기. ",
            "// src/reducers/index.js",
            "// reducer 별로 만들어진 state 를 store에서 하나의 state로 합친다.",
            "// Redux.combineReducers() 사용하면 여러개의 리듀서를 하나로 합치기는 것이 가능하다.",
            "import { combineReducers } from 'redux';",
            "",
            "import reducer이름 from '../containers/컴포넌트이름/reducer';",
            "import reducer목록 from '../containers/컴포넌트목록/reducer';",
            "",
            "const reducers = combineReducers({",
            "  이름s: reducer이름,",
            "  목록s: reducer목록,",
            "});",
            "",
            "export default reducers;",
            "",
            "// 7. 프로젝트용 store 만들기. ",
            "// src/store/index.js 수정",
            "import { createStore, applyMiddleware, compose } from 'redux';",
            "import createSagaMiddleware from 'redux-saga';",
            "import logger from 'redux-logger';",
            "",
            "import reducers from '../reducers';",
            "import saga컴포넌트이름 from '../containers/컴포넌트이름/saga';",
            "import saga컴포넌트목록 from '../containers/컴포넌트목록/saga';",
            "",
            "const sagaMiddleware = createSagaMiddleware(); // saga 미들웨어 생성.",
            "const enhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;",
            "const store = createStore(reducers, /*preloadedState,*/ enhancers( applyMiddleware(sagaMiddleware, logger) ) );",
            "",
            "// 스토어 생성 후 sagaMiddleware 에 개별 saga를 추가해야 합니다.",
            "sagaMiddleware.run(saga컴포넌트이름);",
            "sagaMiddleware.run(saga컴포넌트목록);",
            "",
            "export default store;",
            "",
            "// 8. 컴포넌트에 store 주입하기. ",
            "// src/index.js",
            "import React from 'react';",
            "import ReactDOM from 'react-dom';",
            "",
            "// ReactRedux.Provider 는 store의 state가 변경되면 자동으로 render() 메서드를 실행되게 하는 컴포넌트다.",
            "import { Provider } from 'react-redux';",
            "import { BrowserRouter } from 'react-router-dom';",
            "",
            "import App from './App';",
            "import store from './store';",
            "",
            "ReactDOM.render(",
            "  <React.StrictMode>",
            "    <Provider store={store}>",
            "      <BrowserRouter>",
            "        <App />",
            "      </BrowserRouter>",
            "    </Provider>,",
            "  </React.StrictMode>,",
            "  document.getElementById('root')",
            ");",
            "",
            "",
            "// 9. 컴포넌트 만들기",
            "// src/containers/컴포넌트이름/index.js",
            "// 9-1. action import",
            "// 9-2. store state 내림 설정. useSelector 훅 사용",
            "// 9-3. callback 메서드 만들기. useDispatch 훅 사용",
            "import { action함수 as actions, action상수 as types } from './action';",
        ],
        "description": "Redux Function Component Script"
    },
    "React script import": {
        "prefix": "reactplugin",
        "body": [
            "",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.js\">",
            "    /* 자바스크립트로 컴파일러. ES6-->ES5, JSX-->ES5 */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/16.12.0/umd/react.development.js\">",
            "    /* import React, { Component, PureComponent } from 'react' */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.7.2/prop-types.js\">",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.11.0/umd/react-dom.development.js\">",
            "    /* import ReactDOM from 'react-dom' */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-redux/7.2.2/react-redux.js\">",
            "    /*  import ReactRedux, {Provider, useDispatch, useSelector} from 'react-redux' */",
            "</script>",
            "< script src=\"https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/5.2.0/react-router-dom.js\">",
            "    /*  import ReactRouterDOM, {BrowserRouter, Routes, Route, NavLink} from 'react-router-dom' */",
            "</script>",
            "< script src=\"https://unpkg.com/immer\">",
            "    /* 불변객체 state를 조작하는 라이브러리. import immer from 'immer' */",
            "</script>",
            "< script type=\"text/babel\">",
            "    ",
            "</script>"
        ],
        "description": "React script"
    },
    "Axios": {
        "prefix": "axiospromise",
        "body": [
            "// import axios from 'axios';",
            "",
            "const result = axios({",
            "    url: 'item',  // 호출되는 서버 주소.",
            "    method: 'get',       // request method: get, post, delete, put",
            "    params: { },  // 서버로 보내는 데이터. { data1:'test1', data2:'test2' } ",
            "    timeout: 30000,    // 최대 대기 시간: 30초. 30초 이상이 되면 fail 부분이 실행됨.",
            "    responseType: 'json',  // response로 넘어오는 데이터 형태: text, html, xml, json, jsonp, script",
            "});"
        ],
        "description": "React script"
    },
    "Jest": {
        "prefix": "jest",
        "body": [
            "describe('Noun: method or a class/module name', () => {",
            "    before((done) => {",
            "        // This code will be called just once before all it statements",
            "        done();",
            "    });",
            "    beforeEach((done) => {",
            "        // This code will be called many times before all it statements",
            "        done();",
            "    });",
            "    after((done) => {",
            "        // This code will be called just once after all it statements",
            "        done();",
            "    });",
            "    afterEach((done) => {",
            "        // This code will be called many times after all it statements",
            "        done();",
            "    });",
            "    it('Verb describing the behavior', (done) => {",
            "        // Assertions",
            "        done();",
            "    });",
            "    it('Verb describing the behavior', (done) => {",
            "        // Assertions",
            "        done();",
            "    });",
            "});",
        ],
        "description": "Jest script"
    }

}